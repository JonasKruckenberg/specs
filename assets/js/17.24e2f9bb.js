(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{370:function(t,e,a){"use strict";a.r(e);var s=a(42),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"specification-dag-json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specification-dag-json"}},[t._v("#")]),t._v(" Specification: DAG-JSON")]),t._v(" "),a("p",[a("strong",[t._v("Status: Descriptive - Final")])]),t._v(" "),a("p",[t._v("DAG-JSON supports the full "),a("RouterLink",{attrs:{to:"/data-model-layer/data-model.html"}},[t._v("IPLD Data Model")]),t._v(".")],1),t._v(" "),a("h2",{attrs:{id:"format"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#format"}},[t._v("#")]),t._v(" Format")]),t._v(" "),a("h3",{attrs:{id:"serialization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serialization"}},[t._v("#")]),t._v(" Serialization")]),t._v(" "),a("p",[t._v("Codec implementors "),a("strong",[t._v("MUST")]),t._v(" do the following in order to ensure hashes consistently match for the same block data.")]),t._v(" "),a("ul",[a("li",[t._v("Sort object keys by their (UTF-8) encoded representation, i.e. with byte comparisons")]),t._v(" "),a("li",[t._v("Strip whitespace")])]),t._v(" "),a("p",[t._v("This produces the most compact and consistent representation which will ensure that two codecs\nproducing the same data end up with matching block hashes.")]),t._v(" "),a("h3",{attrs:{id:"natively-supported-kinds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#natively-supported-kinds"}},[t._v("#")]),t._v(" Natively supported kinds")]),t._v(" "),a("p",[t._v("All kinds of the IPLD Data Model except Bytes and Link are supported natively by JSON.")]),t._v(" "),a("p",[t._v("Contrary to popular belief, JSON as a format supports Big Integers. It's only\nJavaScript itself that has trouble with them. This means JS implementations\nof DAG-JSON can't use the native JSON parser and serializer.")]),t._v(" "),a("h3",{attrs:{id:"other-kinds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#other-kinds"}},[t._v("#")]),t._v(" Other kinds")]),t._v(" "),a("p",[t._v("The non-natively supported kinds are wrapped in an object, where the key is a slash ("),a("code",[t._v('"/"')]),t._v(") and the value is the actual kind.")]),t._v(" "),a("h4",{attrs:{id:"bytes-kind"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bytes-kind"}},[t._v("#")]),t._v(" Bytes kind")]),t._v(" "),a("p",[t._v("The Bytes kind is represented as an object with "),a("code",[t._v('"bytes"')]),t._v(" as key and a "),a("a",{attrs:{href:"https://github.com/multiformats/multibase",target:"_blank",rel:"noopener noreferrer"}},[t._v("Multibase"),a("OutboundLink")],1),t._v(" Base64 encoded string as value. The Base64 encoding is the one described in "),a("a",{attrs:{href:"https://tools.ietf.org/html/rfc4648#section-4",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 4648, section 4"),a("OutboundLink")],1),t._v(" without padding, hence the Multibase prefix is "),a("code",[t._v("m")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bytes"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Multibase Base64 encoded binary */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"link-kind"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#link-kind"}},[t._v("#")]),t._v(" Link kind")]),t._v(" "),a("p",[t._v("A link is represented as a base encoded CID. CIDv0 and CIDv1 are encoded differently.")]),t._v(" "),a("ul",[a("li",[t._v("CIDv1 is represented as a Multibase Base32 encoded string. The Base32 encoding is the one described in "),a("a",{attrs:{href:"https://tools.ietf.org/html/rfc4648#section-6",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 4648, section 6"),a("OutboundLink")],1),t._v(" without padding, hence the Multibase prefix is "),a("code",[t._v("b")]),t._v(".")]),t._v(" "),a("li",[t._v("CIDv0 is represented in its only possible Base58 encoding. The Base58 encoding is the one described in "),a("a",{attrs:{href:"https://tools.ietf.org/html/draft-msporny-base58",target:"_blank",rel:"noopener noreferrer"}},[t._v("Base58 draft"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Base58 encoded CIDv0 or Multibase Base32 encoded CIDv1 */")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);