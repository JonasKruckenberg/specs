(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{369:function(e,t,a){"use strict";a.r(t);var r=a(42),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"specification-dag-cbor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specification-dag-cbor"}},[e._v("#")]),e._v(" Specification: DAG-CBOR")]),e._v(" "),a("p",[a("strong",[e._v("Status: Descriptive - Draft")])]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#format"}},[e._v("Format")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#links"}},[e._v("Links")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#map-keys"}},[e._v("Map Keys")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#strictness"}},[e._v("Strictness")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#floating-point-encoding-unresolved"}},[e._v("Floating Point Encoding (Unresolved)")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#implementations"}},[e._v("Implementations")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#javascript"}},[e._v("JavaScript")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#go"}},[e._v("Go")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#java"}},[e._v("Java")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#limitations"}},[e._v("Limitations")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#javascript-1"}},[e._v("JavaScript")])])])])]),e._v(" "),a("p",[e._v("DAG-CBOR supports the full "),a("RouterLink",{attrs:{to:"/data-model-layer/data-model.html"}},[e._v("IPLD Data Model")]),e._v(".")],1),e._v(" "),a("p",[e._v("DAG-CBOR uses the "),a("a",{attrs:{href:"https://tools.ietf.org/html/rfc7049",target:"_blank",rel:"noopener noreferrer"}},[e._v("Concise Binary Object Representation (CBOR)"),a("OutboundLink")],1),e._v(" data format, which natively supports all "),a("RouterLink",{attrs:{to:"/data-model-layer/data-model.html#kinds"}},[e._v("IPLD Data Model Kinds")]),e._v(".")],1),e._v(" "),a("h2",{attrs:{id:"format"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#format"}},[e._v("#")]),e._v(" Format")]),e._v(" "),a("p",[e._v("The CBOR IPLD format is called DAG-CBOR to disambiguate it from regular CBOR. Most simple CBOR objects are valid DAG-CBOR. The primary differences are:")]),e._v(" "),a("ul",[a("li",[e._v("tag "),a("code",[e._v("42")]),e._v(" interpreted as CIDs, no other tags are supported")]),e._v(" "),a("li",[e._v("maps may only be keyed by strings")]),e._v(" "),a("li",[e._v("additional strictness requirements are applied to ensure canonical data encoding forms")])]),e._v(" "),a("h2",{attrs:{id:"links"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#links"}},[e._v("#")]),e._v(" Links")]),e._v(" "),a("p",[e._v("As with all IPLD formats, DAG-CBOR must be able to encode "),a("RouterLink",{attrs:{to:"/data-model-layer/data-model.html#link-kind"}},[e._v("Links")]),e._v(". In DAG-CBOR, links are the binary form of a [CID] encoded using the raw-binary identity "),a("a",{attrs:{href:"https://github.com/multiformats/multibase",target:"_blank",rel:"noopener noreferrer"}},[e._v("Multibase"),a("OutboundLink")],1),e._v(". That is, the Multibase identity prefix ("),a("code",[e._v("0x00")]),e._v(") is prepended to the binary form of a CID and this new byte array is encoded into CBOR as a byte-string (major type 2), with the tag "),a("code",[e._v("42")]),e._v(".")],1),e._v(" "),a("p",[e._v("The inclusion of the Multibase prefix exists for historical reasons and the identity prefix "),a("em",[e._v("must not")]),e._v(" be omitted.")]),e._v(" "),a("h2",{attrs:{id:"map-keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map-keys"}},[e._v("#")]),e._v(" Map Keys")]),e._v(" "),a("p",[e._v("In DAG-CBOR, map keys must be strings, as defined by the "),a("RouterLink",{attrs:{to:"/data-model-layer/data-model.html"}},[e._v("IPLD Data Model")]),e._v(". Other map keys, such as ints, are not supported and should be rejected when encountered.")],1),e._v(" "),a("h2",{attrs:{id:"strictness"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strictness"}},[e._v("#")]),e._v(" Strictness")]),e._v(" "),a("p",[e._v("DAG-CBOR requires that there exist a single, canonical way of encoding any given object, and that encoded forms contain no superfluous data that may be ignored or lost in a round-trip decode/encode.")]),e._v(" "),a("p",[e._v("Therefore the DAG-CBOR codec must:")]),e._v(" "),a("ol",[a("li",[e._v("Use no tags other than the CID tag ("),a("code",[e._v("42")]),e._v("). A valid DAG-CBOR encoder must not encode using any additional tags and a valid DAG-CBOR decoder must reject objects containing additional tags as invalid.\n"),a("ul",[a("li",[e._v("This includes any of the initial values of the tag registry in "),a("a",{attrs:{href:"https://tools.ietf.org/html/rfc7049#section-2.4",target:"_blank",rel:"noopener noreferrer"}},[e._v("section 2.4 of the CBOR specification"),a("OutboundLink")],1),e._v(", such as dates, bignums, bigfloats, URIs, regular expressions and other complex, or simple values whether or not they map to the "),a("RouterLink",{attrs:{to:"/data-model-layer/data-model.html"}},[e._v("IPLD Data Model")]),e._v(".")],1)])]),e._v(" "),a("li",[e._v("The only usable major type 7 minor types are those for encoding Floats ("),a("code",[e._v("25")]),e._v(", "),a("code",[e._v("26")]),e._v(", "),a("code",[e._v("27")]),e._v("), True ("),a("code",[e._v("20")]),e._v("), False ("),a("code",[e._v("21")]),e._v(") and Null ("),a("code",[e._v("22")]),e._v(").\n"),a("ul",[a("li",[e._v('"Simple values" are not supported. This includes all registered or unregistered simple values that are encoded with a major type 7.')]),e._v(" "),a("li",[e._v("Undefined ("),a("code",[e._v("23")]),e._v(") is not supported.")])])]),e._v(" "),a("li",[e._v("Use the canonical CBOR encoding defined by the suggestions in "),a("a",{attrs:{href:"https://tools.ietf.org/html/rfc7049#section-3.9",target:"_blank",rel:"noopener noreferrer"}},[e._v("section 3.9 of the CBOR specification"),a("OutboundLink")],1),e._v(". A valid DAG-CBOR decoder should reject objects not following these restrictions as invalid. Specifically:\n"),a("ul",[a("li",[e._v("Integer encoding must be as short as possible.")]),e._v(" "),a("li",[e._v("The expression of lengths in major types 2 through 5 must be as short as possible.")]),e._v(" "),a("li",[e._v("The keys in every map must be sorted lowest value to highest. Sorting is performed on the bytes of the representation of the keys.\n"),a("ul",[a("li",[e._v("If two keys have different lengths, the shorter one sorts earlier;")]),e._v(" "),a("li",[e._v("If two keys have the same length, the one with the lower value in (byte-wise) lexical order sorts earlier.")])])]),e._v(" "),a("li",[e._v("Indefinite-length items are not supported, only definite-length items are usable.")])])]),e._v(" "),a("li",[e._v("Encode and decode a single top-level CBOR object and not allow back-to-back concatenated objects, as suggested by "),a("a",{attrs:{href:"https://tools.ietf.org/html/rfc7049#section-3.1",target:"_blank",rel:"noopener noreferrer"}},[e._v("section 3.1 of the CBOR specification"),a("OutboundLink")],1),e._v(" for "),a("em",[e._v("streaming applications")]),e._v(". All bytes of an encoded DAG-CBOR object must decode to a single object. Extraneous bytes, whether valid or invalid CBOR, should fail validation.")])]),e._v(" "),a("h3",{attrs:{id:"floating-point-encoding-unresolved"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#floating-point-encoding-unresolved"}},[e._v("#")]),e._v(" Floating Point Encoding (Unresolved)")]),e._v(" "),a("p",[e._v("Strict "),a("strong",[e._v("floating point")]),e._v(" encoding rules need to be resolved. Current CBOR encoding implementations used by IPLD libraries are "),a("em",[e._v("not")]),e._v(" unified in their approach.")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/dignifiedquire/borc",target:"_blank",rel:"noopener noreferrer"}},[e._v("borc"),a("OutboundLink")],1),e._v(", for JavaScript (used via "),a("a",{attrs:{href:"https://github.com/ipld/js-ipld-dag-cbor/",target:"_blank",rel:"noopener noreferrer"}},[e._v("dag-cbor"),a("OutboundLink")],1),e._v("), uses a smallest-possible approach:")]),e._v(" "),a("ul",[a("li",[e._v("Floating point values must be encoded as the smallest of 16-, 32-, or 64-bit floating point that accurately represents the value, even for integral values.")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/polydawn/refmt/",target:"_blank",rel:"noopener noreferrer"}},[e._v("refmt"),a("OutboundLink")],1),e._v(", for Go (used via "),a("a",{attrs:{href:"https://github.com/ipfs/go-ipld-cbor",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipld-cbor"),a("OutboundLink")],1),e._v(" and "),a("a",{attrs:{href:"http://github.com/ipld/go-ipld-prime",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipld-prime"),a("OutboundLink")],1),e._v("), uses a consistent 64-bit approach:")]),e._v(" "),a("ul",[a("li",[e._v("All floating point values must be encoded as 64-bit floating point, even for integral values.")])]),e._v(" "),a("p",[e._v("One of these approaches will be chosen and the libraries for the other language will be adjusted or replaced to harmonize.")]),e._v(" "),a("h2",{attrs:{id:"implementations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementations"}},[e._v("#")]),e._v(" Implementations")]),e._v(" "),a("h3",{attrs:{id:"javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[e._v("#")]),e._v(" JavaScript")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/ipld/js-ipld-dag-cbor/",target:"_blank",rel:"noopener noreferrer"}},[e._v("dag-cbor"),a("OutboundLink")],1),e._v(", used by "),a("a",{attrs:{href:"https://github.com/ipld/js-ipld",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipld"),a("OutboundLink")],1),e._v(" and "),a("a",{attrs:{href:"https://github.com/ipld/js-block",target:"_blank",rel:"noopener noreferrer"}},[e._v("@ipld/block"),a("OutboundLink")],1),e._v(" adheres to this specification, with the following caveats:")]),e._v(" "),a("ul",[a("li",[e._v("Strictness is not yet enforced on decode, blocks encoded that don't follow the strictness rules are not rejected")]),e._v(" "),a("li",[e._v("Floating point values are encoded as their smallest form (see above)")])]),e._v(" "),a("h3",{attrs:{id:"go"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go"}},[e._v("#")]),e._v(" Go")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/ipfs/go-ipld-cbor",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipld-cbor"),a("OutboundLink")],1),e._v(" and "),a("a",{attrs:{href:"http://github.com/ipld/go-ipld-prime",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipld-prime"),a("OutboundLink")],1),e._v(" adhere to this specification, with the following caveats:")]),e._v(" "),a("ul",[a("li",[e._v("Strictness is not yet enforced on decode, blocks encoded that don't follow the strictness rules are not rejected")]),e._v(" "),a("li",[e._v("All floating point value are encoded as 64-bits")])]),e._v(" "),a("h3",{attrs:{id:"java"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[e._v("#")]),e._v(" Java")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/Peergos/Peergos/tree/master/src/peergos/shared/cbor",target:"_blank",rel:"noopener noreferrer"}},[e._v("java ipld from Peergos"),a("OutboundLink")],1),e._v(" adhere to this specification, with the following caveats:")]),e._v(" "),a("ul",[a("li",[e._v("Strictness is not yet enforced on decode, blocks encoded that don't follow the strictness rules are not rejected")]),e._v(" "),a("li",[e._v("Floats are disabled")])]),e._v(" "),a("h2",{attrs:{id:"limitations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#limitations"}},[e._v("#")]),e._v(" Limitations")]),e._v(" "),a("h3",{attrs:{id:"javascript-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-2"}},[e._v("#")]),e._v(" JavaScript")]),e._v(" "),a("p",[e._v("Users of DAG-CBOR that expect their data may be consumed or produced by JavaScript at some point should be aware of limitations that the language imposes on its use of DAG-CBOR, specifically concerning numbers.")]),e._v(" "),a("p",[e._v("All JavaScript numbers, both floating point and integer, (using the "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("Number")]),a("OutboundLink")],1),e._v(" primitive wrapper) are represented internally as 64-bit "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Floating-point_arithmetic",target:"_blank",rel:"noopener noreferrer"}},[e._v("IEEE 754"),a("OutboundLink")],1),e._v(" floating-point values (i.e. double-precision). Some implications within JavaScript of this design choice are:")]),e._v(" "),a("ul",[a("li",[e._v("There is no clear differentiation between a pure integer type and a floating-point number where a developer may wish to have such a differentiation.")]),e._v(" "),a("li",[e._v("By convention, JavaScript engines and developers usually omit the decimal point when representing whole numbers, simulating integers where the number is not actually stored as an integer.")]),e._v(" "),a("li",[e._v("There are limits on maximum and minimum safe integer sizes representable in JavaScript that are more constrained than those of languages where there are 64-bit integer types. Numbers outside of the range of "),a("code",[e._v("Number.MAX_SAFE_INTEGER")]),e._v(" ("),a("code",[e._v("2")]),a("sup",[a("code",[e._v("53")])]),a("code",[e._v("- 1")]),e._v(") and "),a("code",[e._v("Number.MIN_SAFE_INTEGER")]),e._v(" ("),a("code",[e._v("-(2")]),a("sup",[a("code",[e._v("53")])]),a("code",[e._v("- 1)")]),e._v(") cannot be safely manipulated or inspected as they incur rounding effects imposed by the IEEE 754 representation.")]),e._v(" "),a("li",[e._v('Native bit-wise operations on "integers" are not able to be performed outside of the 32-bit range; larger numbers will be truncated.')])]),e._v(" "),a("p",[e._v("The current CBOR encoder/decoder used by the primary JavaScript DAG-CBOR implementation uses the "),a("a",{attrs:{href:"https://github.com/MikeMcl/bignumber.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("bignumber.js"),a("OutboundLink")],1),e._v(" library to handle large numbers in some cases, although reliance on its wrapper type is not recommended by DAG-CBOR users.")]),e._v(" "),a("p",[e._v("The implications for DAG-CBOR of these limitaitons are:")]),e._v(" "),a("ul",[a("li",[e._v("Any "),a("code",[e._v("Number")]),e._v(" serialized by the JavaScript CBOR encoder relies on a whole-number check (e.g. "),a("code",[e._v("x % 1 === 0")]),e._v(") to determine whether it should be encoded as an integer or a float.")]),e._v(" "),a("li",[e._v("Any float deserialized by the JavaScript CBOR decoder that does not have a fractional component will be indistinguishable from an integer to a JavaScript program.")]),e._v(" "),a("li",[e._v("Any "),a("code",[e._v("Number")]),e._v(" greater than "),a("code",[e._v("Number.MAX_SAFE_INTEGER")]),e._v(" or less than "),a("code",[e._v("Number.MIN_SAFE_INTEGER")]),e._v(" cannot be properly inspected for its whole-number status and is therefore encoded by the JavaScript CBOR encoder as float regardless of whether it is a whole-number or has a fractional component.")]),e._v(" "),a("li",[e._v("Any integer deserialized by the JavaScript CBOR decoder greater than "),a("code",[e._v("Number.MAX_SAFE_INTEGER")]),e._v(" or less than "),a("code",[e._v("Number.MIN_SAFE_INTEGER")]),e._v(" will be returned as a bignumber.js wrapper type, which may be unexpected to users and have unexpected effects on downstream code.")])]),e._v(" "),a("p",[e._v("A new "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt",target:"_blank",rel:"noopener noreferrer"}},[e._v("BigInt"),a("OutboundLink")],1),e._v(" built-in type is currently being adopted across JavaScript engines. Once support is widely available, it is expected that this type will assist with some of these challenges.")])])}),[],!1,null,null,null);t.default=o.exports}}]);